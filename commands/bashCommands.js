window.bashCommands = [
    { command: '#!/bin/bash', description: 'Defines the script as a bash script' },
    { command: 'echo "text"', description: 'Prints text to the terminal' },
    { command: 'var="value"', description: 'Assigns a value to a variable' },
    { command: '$var', description: 'Accesses the value of a variable' },
    { command: 'read var', description: 'Takes input from the user and stores it in a variable' },
    { command: 'if [ condition ]; then ... fi', description: 'Conditional statement (if)' },
    { command: 'if [ condition ]; then ... else ... fi', description: 'Conditional statement (if-else)' },
    { command: 'if [ condition ]; then ... elif [ condition ]; then ... else ... fi', description: 'Conditional statement (if-elif-else)' },
    { command: 'case $var in ... esac', description: 'Case statement, like switch in other languages' },
    { command: 'for var in list; do ... done', description: 'For loop' },
    { command: 'while [ condition ]; do ... done', description: 'While loop' },
    { command: 'until [ condition ]; do ... done', description: 'Until loop (runs until condition is true)' },
    { command: 'function name() { ... }', description: 'Defines a function' },
    { command: 'name()', description: 'Calls a function' },
    { command: '$#', description: 'Number of arguments passed to the script' },
    { command: '$0', description: 'The name of the script' },
    { command: '$1, $2, ...', description: 'Positional parameters (first, second, etc., arguments)' },
    { command: '$@', description: 'All positional parameters' },
    { command: '$?', description: 'Exit status of the last executed command' },
    { command: '$$', description: 'The PID of the current shell' },
    { command: '&&', description: 'Logical AND: runs the next command only if the previous one succeeded' },
    { command: '||', description: 'Logical OR: runs the next command only if the previous one failed' },
    { command: '>', description: 'Redirects output to a file (overwrites the file)' },
    { command: '>>', description: 'Redirects output to a file (appends to the file)' },
    { command: '2>', description: 'Redirects error output to a file' },
    { command: '|', description: 'Pipes the output of one command as input to another' },
    { command: '&&', description: 'Runs the second command only if the first succeeds' },
    { command: '$(command)', description: 'Command substitution: executes a command and returns its output' },
    { command: '`command`', description: 'Older syntax for command substitution' },
    { command: 'test', description: 'Tests expressions (file conditions, string comparisons, etc.)' },
    { command: '[ expression ]', description: 'Tests a condition (shortcut for the test command)' },
    { command: '[[ expression ]]', description: 'Advanced test for conditions with better syntax' },
    { command: 'chmod +x script.sh', description: 'Makes the script executable' },
    { command: 'exit [n]', description: 'Exits a script with an optional status code' },
    { command: 'trap command signal', description: 'Executes a command when a specified signal is received' },
    { command: 'sleep n', description: 'Pauses the script for n seconds' },
    { command: 'declare -r var', description: 'Declares a read-only variable' },
    { command: 'declare -i var', description: 'Declares an integer variable' },
    { command: 'let var=expression', description: 'Performs arithmetic operations' },
    { command: 'expr', description: 'Evaluates expressions (arithmetic, string, logical)' },
    { command: 'source file.sh', description: 'Executes a script in the current shell (same as . file.sh)' },
    { command: 'export var', description: 'Exports a variable to be available to child processes' }
];
