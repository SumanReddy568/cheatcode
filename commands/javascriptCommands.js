window.javascriptCommands = [
    { command: 'let', description: 'Declares a block-scoped local variable, optionally initializing it' },
    { command: 'const', description: 'Declares a block-scoped constant variable' },
    { command: 'var', description: 'Declares a function-scoped or globally-scoped variable (old syntax)' },
    { command: 'function functionName() {}', description: 'Declares a function' },
    { command: '()=> {}', description: 'Arrow function syntax' },
    { command: 'if (condition) {} else {}', description: 'Conditional statement to execute code based on a condition' },
    { command: 'for (let i = 0; i < length; i++) {}', description: 'Standard for loop' },
    { command: 'while (condition) {}', description: 'Runs a block of code while a specified condition is true' },
    { command: 'do {} while (condition)', description: 'Executes a block of code once, then repeats while condition is true' },
    { command: 'try {} catch (error) {}', description: 'Handles exceptions that occur in the try block' },
    { command: 'Promise', description: 'Represents the eventual completion (or failure) of an asynchronous operation' },
    { command: 'async function() {}', description: 'Declares an asynchronous function that returns a promise' },
    { command: 'await', description: 'Pauses execution of async functions until the promise resolves' },
    { command: 'document.getElementById("id")', description: 'Selects an HTML element by its ID' },
    { command: 'document.querySelector(".class")', description: 'Selects the first matching element for a given CSS selector' },
    { command: 'addEventListener("click", function)', description: 'Attaches an event handler to an element' },
    { command: 'setTimeout(function, delay)', description: 'Executes a function after a specified delay (milliseconds)' },
    { command: 'setInterval(function, interval)', description: 'Repeatedly calls a function with a set time interval' },
    { command: 'clearInterval(intervalID)', description: 'Stops a time interval previously established by setInterval()' },
    { command: 'fetch(url)', description: 'Makes a network request and returns a promise, used for HTTP requests' },
    { command: 'JSON.stringify(object)', description: 'Converts a JavaScript object into a JSON string' },
    { command: 'JSON.parse(string)', description: 'Parses a JSON string, returning a JavaScript object' },
    { command: 'Array.map()', description: 'Creates a new array populated with the results of calling a function on every element' },
    { command: 'Array.filter()', description: 'Creates a new array with elements that pass a condition specified in a function' },
    { command: 'Array.reduce()', description: 'Executes a reducer function on each element of the array, resulting in a single output' },
    { command: 'Array.forEach()', description: 'Executes a function for each array element' },
    { command: 'Array.find()', description: 'Returns the first element that satisfies the provided testing function' },
    { command: 'Array.some()', description: 'Checks if at least one element in the array passes a test implemented by a function' },
    { command: 'Array.every()', description: 'Checks if all elements in an array pass a test' },
    { command: 'Array.push()', description: 'Adds one or more elements to the end of an array and returns the new length' },
    { command: 'Array.pop()', description: 'Removes the last element from an array and returns it' },
    { command: 'Array.shift()', description: 'Removes the first element from an array and returns it' },
    { command: 'Array.unshift()', description: 'Adds one or more elements to the beginning of an array and returns the new length' },
    { command: 'Array.includes()', description: 'Checks if an array includes a certain value' },
    { command: 'String.includes()', description: 'Checks if a string contains a specified value' },
    { command: 'String.split()', description: 'Splits a string into an array of substrings based on a separator' },
    { command: 'String.trim()', description: 'Removes whitespace from both ends of a string' },
    { command: 'Math.random()', description: 'Generates a random decimal number between 0 and 1' },
    { command: 'Math.floor()', description: 'Rounds a number down to the nearest integer' },
    { command: 'Math.ceil()', description: 'Rounds a number up to the nearest integer' },
    { command: 'Math.max()', description: 'Returns the largest of zero or more numbers' },
    { command: 'Math.min()', description: 'Returns the smallest of zero or more numbers' },
    { command: 'Math.round()', description: 'Rounds a number to the nearest integer' },
    { command: 'isNaN()', description: 'Determines whether a value is NaN (Not-a-Number)' },
    { command: 'typeof', description: 'Returns the type of a variable or expression (e.g., string, number, object)' },
    { command: 'instanceof', description: 'Checks if an object is an instance of a specific class or constructor' },
    { command: 'new', description: 'Creates an instance of a user-defined object or a built-in object' },
    { command: 'class MyClass {}', description: 'Defines a class in JavaScript' },
    { command: 'this', description: 'Refers to the current object or context in which a function is called' },
    { command: 'console.log()', description: 'Prints messages to the web console for debugging' },
    { command: 'alert()', description: 'Displays an alert box with a specified message' }
];
