window.pythonCommands = [
    { command: 'print()', description: 'Prints the specified message or output to the console' },
    { command: 'def function_name():', description: 'Defines a function' },
    { command: 'return', description: 'Exits a function and returns a value' },
    { command: 'if condition:', description: 'Executes a block of code if a condition is true' },
    { command: 'elif condition:', description: 'Else if statement to check another condition if the previous one was false' },
    { command: 'else:', description: 'Executes a block of code if none of the conditions are true' },
    { command: 'for i in range(n):', description: 'For loop that iterates over a sequence of numbers' },
    { command: 'while condition:', description: 'While loop that repeats as long as the condition is true' },
    { command: 'try: except:', description: 'Handles exceptions and errors in a block of code' },
    { command: 'class ClassName:', description: 'Defines a new class in Python (object-oriented programming)' },
    { command: '__init__', description: 'Constructor method for a class, called when an object is created' },
    { command: 'self', description: 'Refers to the instance of the class within methods' },
    { command: 'import module', description: 'Imports a module or library into the program' },
    { command: 'from module import function', description: 'Imports a specific function or object from a module' },
    { command: 'with open(file, mode) as file:', description: 'Opens a file and ensures it gets closed after operations are done' },
    { command: 'file.read()', description: 'Reads the entire contents of a file' },
    { command: 'file.write(data)', description: 'Writes data to a file' },
    { command: 'len()', description: 'Returns the length of an object, such as a list or string' },
    { command: 'range(start, stop, step)', description: 'Generates a sequence of numbers from start to stop (exclusive)' },
    { command: 'list()', description: 'Creates a list (a mutable, ordered collection of elements)' },
    { command: 'dict()', description: 'Creates a dictionary (a collection of key-value pairs)' },
    { command: 'tuple()', description: 'Creates a tuple (an immutable, ordered collection of elements)' },
    { command: 'set()', description: 'Creates a set (an unordered collection of unique elements)' },
    { command: 'isinstance(obj, class)', description: 'Checks if an object is an instance of a specific class or type' },
    { command: 'type()', description: 'Returns the type of an object' },
    { command: 'map(function, iterable)', description: 'Applies a function to every item of an iterable' },
    { command: 'filter(function, iterable)', description: 'Filters elements of an iterable based on a function' },
    { command: 'reduce(function, iterable)', description: 'Reduces an iterable to a single cumulative value (from functools)' },
    { command: 'lambda', description: 'Creates an anonymous function (lambda expression)' },
    { command: 'sorted()', description: 'Returns a sorted list from the elements of an iterable' },
    { command: 'zip()', description: 'Combines multiple iterables into a single iterator of tuples' },
    { command: 'enumerate()', description: 'Adds a counter to an iterable and returns it as an enumerate object' },
    { command: 'sum()', description: 'Returns the sum of all items in an iterable' },
    { command: 'max()', description: 'Returns the maximum value from an iterable' },
    { command: 'min()', description: 'Returns the minimum value from an iterable' },
    { command: 'abs()', description: 'Returns the absolute value of a number' },
    { command: 'round()', description: 'Rounds a number to the nearest integer or specified decimal places' },
    { command: 'int()', description: 'Converts a value to an integer' },
    { command: 'float()', description: 'Converts a value to a floating-point number' },
    { command: 'str()', description: 'Converts a value to a string' },
    { command: 'input()', description: 'Gets input from the user' },
    { command: 'assert', description: 'Tests if a condition is true, and raises an AssertionError if it is not' },
    { command: 'exit()', description: 'Exits the Python interpreter' },
    { command: 'help()', description: 'Displays the documentation for a given object or module' },
    { command: 'dir()', description: 'Lists all the attributes and methods of an object' },
    { command: 'enumerate()', description: 'Enumerates over an iterable and returns both index and item' },
    { command: 'list comprehension', description: 'Generates a list from a sequence using a concise syntax' },
    { command: 'def generator(): yield', description: 'Defines a generator function, which produces values lazily' },
    { command: 'try: finally:', description: 'Ensures that the code in the finally block is executed, even if an exception occurs' },
    { command: 'raise Exception', description: 'Raises an exception manually' },
    { command: 'any()', description: 'Returns True if any element of an iterable is true' },
    { command: 'all()', description: 'Returns True if all elements of an iterable are true' },
    { command: 're.match()', description: 'Performs pattern matching using regular expressions' },
    { command: 're.search()', description: 'Searches a string for a match to the pattern' },
    { command: 'datetime.now()', description: 'Gets the current date and time' },
    { command: 'time.sleep()', description: 'Suspends execution of a program for the specified time (in seconds)' },
    { command: 'os.getcwd()', description: 'Gets the current working directory' },
    { command: 'os.listdir()', description: 'Returns a list of all files and directories in a specified directory' },
    { command: 'os.path.join()', description: 'Joins two or more pathname components' },
    { command: 'subprocess.run()', description: 'Runs a shell command from Python' }
];
