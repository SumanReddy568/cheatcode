window.javaCommands = [
    { command: 'java -version', description: 'Displays the version of the installed Java runtime' },
    { command: 'javac FileName.java', description: 'Compiles a Java source file into bytecode' },
    { command: 'java ClassName', description: 'Runs a Java application' },
    { command: 'javap -c ClassName', description: 'Disassembles a Java class file to show its bytecode' },
    { command: 'java -cp path/to/class/files ClassName', description: 'Runs a Java class with a specific classpath' },
    { command: 'javac -d output_directory FileName.java', description: 'Compiles a Java source file and places the bytecode in a specified directory' },
    { command: 'jar cf jar-file input-files', description: 'Creates a JAR (Java ARchive) file from specified files' },
    { command: 'jar tf jar-file', description: 'Lists the contents of a JAR file' },
    { command: 'jar xf jar-file', description: 'Extracts the contents of a JAR file' },
    { command: 'javac -classpath classpath FileName.java', description: 'Compiles a Java source file with a specific classpath' },
    { command: 'java -Dproperty=value -cp classpath ClassName', description: 'Runs a Java application with system properties and a specified classpath' },
    { command: 'import package_name.ClassName;', description: 'Imports a class from a package' },
    { command: 'public class ClassName { ... }', description: 'Defines a public class in Java' },
    { command: 'public static void main(String[] args)', description: 'Entry point of a Java application' },
    { command: 'System.out.println("message");', description: 'Prints a message to the console' },
    { command: 'class ClassName { ... }', description: 'Defines a class' },
    { command: 'interface InterfaceName { ... }', description: 'Defines an interface' },
    { command: 'extends', description: 'Indicates that a class inherits from another class' },
    { command: 'implements', description: 'Indicates that a class implements an interface' },
    { command: 'public void methodName() { ... }', description: 'Defines a method' },
    { command: 'return', description: 'Returns a value from a method' },
    { command: 'try { ... } catch (Exception e) { ... } finally { ... }', description: 'Exception handling structure' },
    { command: 'throw new Exception("message");', description: 'Throws an exception' },
    { command: 'new ClassName()', description: 'Creates a new instance of a class' },
    { command: 'this', description: 'Refers to the current instance of a class' },
    { command: 'super', description: 'Refers to the superclass of the current instance' },
    { command: 'static', description: 'Indicates that a field or method belongs to the class rather than instances of the class' },
    { command: 'final', description: 'Indicates that a variable cannot be changed, or a method cannot be overridden' },
    { command: 'abstract', description: 'Indicates that a class or method is abstract and must be implemented by subclasses' },
    { command: 'synchronized', description: 'Ensures that a method or block of code is accessed by only one thread at a time' },
    { command: 'enum', description: 'Defines a set of named constants' },
    { command: 'List<String> list = new ArrayList<>();', description: 'Creates a new ArrayList' },
    { command: 'Map<KeyType, ValueType> map = new HashMap<>();', description: 'Creates a new HashMap' },
    { command: 'Set<Type> set = new HashSet<>();', description: 'Creates a new HashSet' },
    { command: 'Collections.sort(list);', description: 'Sorts a list using the Collections utility class' },
    { command: 'import java.util.*;', description: 'Imports all classes from the java.util package' },
    { command: 'package package_name;', description: 'Defines the package to which a Java class belongs' },
    { command: '@Override', description: 'Indicates that a method overrides a method in its superclass' },
    { command: 'getter and setter methods', description: 'Methods for accessing and updating private fields of a class' },
    { command: 'interface Serializable', description: 'Indicates that a class can be serialized' }
];
